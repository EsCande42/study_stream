import openai
import os
import time
from dotenv import load_dotenv

# Load environment variables
load_dotenv()



class StreamingChatBot:
    def __init__(self):
        self.client = openai.OpenAI(api_key="sk-vVue6LZO-ekdj84olUFL6w", base_url="https://proxy.merkulov.ai")  # Initialize OpenAI client
        self.conversation_history = []

    def add_to_history(self, role, content):
        """Add a message to the conversation history."""
        self.conversation_history.append({
            "role": role,
            "content": content
        })

    def print_typing_effect(self, text, delay=0.03):
        """Display text with a typing effect."""
        for char in text:
            print(char, end="", flush=True)
            time.sleep(delay)
        print()

    def stream_response(self, user_message):
        """Get streaming response from AI."""
        self.add_to_history("user", user_message)
        print("\nü§ñ –ò–ò –¥—É–º–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç...")
        print("=" * 60)

        try:
            stream = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=self.conversation_history,
                stream=True,
                max_tokens=500,
                temperature=0.7
            )

            full_response = ""
            word_count = 0

            for chunk in stream:
                if chunk.choices[0].delta.content is not None:
                    piece = chunk.choices[0].delta.content
                    print(piece, end="", flush=True)
                    full_response += piece
                    if piece == " ":
                        word_count += 1

            self.add_to_history("assistant", full_response)
            print("\n" + "=" * 60)
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(full_response)} —Å–∏–º–≤–æ–ª–æ–≤, ~{word_count} —Å–ª–æ–≤")
            return full_response

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    def show_history(self):
        """Display conversation history."""
        if not self.conversation_history:
            print("üìù –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—É—Å—Ç–∞")
            return

        print("\nüìö –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:")
        print("=" * 50)
        for i, message in enumerate(self.conversation_history, 1):
            role_emoji = "üë¶" if message["role"] == "user" else "ü§ñ"
            role_name = "–¢—ã" if message["role"] == "user" else "–ò–ò"
            print(f"{i}. {role_emoji} {role_name}: {message['content'][:100]}...")
        print()

    def start_chat(self):
        """Start interactive chat session."""
        self.print_typing_effect("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –ß–∞—Ç-–ë–æ—Ç!", 0.05)
        print("\nüí° –°–æ–≤–µ—Ç—ã:")
        print(" - –ü–∏—à–∏ '–≤—ã—Ö–æ–¥' —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å")
        print(" - –ü–∏—à–∏ '–∏—Å—Ç–æ—Ä–∏—è' —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
        print(" - –ü–∏—à–∏ '–æ—á–∏—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")

        while True:
            print("\n" + "-" * 40)
            user_input = input("üë¶ –¢—ã: ").strip()

            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                self.print_typing_effect("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏!")
                break
            elif user_input.lower() in ['–∏—Å—Ç–æ—Ä–∏—è', 'history']:
                self.show_history()
                continue
            elif user_input.lower() in ['–æ—á–∏—Å—Ç–∏—Ç—å', 'clear']:
                self.conversation_history = []
                print("üßπ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!")
                continue
            elif not user_input:
                print("ü§∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
                continue

            self.stream_response(user_input)

def main():
    bot = StreamingChatBot()
    bot.start_chat()

if __name__ == "__main__":
    main()